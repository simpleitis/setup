Install redux toolkit using 'npm install @reduxjs/toolkit react-redux'

Create folder 'store' with subfolder 'apis'

Create the 'api' for defining the hooks, action objects etc for an entity. The api has a lot of properties to be configured. First we configure the 'reducerPath' which defines where the slice which is automatically created by redux toolkit for each api, is to be stored inside the store

Then we define the 'baseQuery' property. Here we define the 'baseUrl' of the api which we want to do CRUD operations on. We could also define a property called 'fetchFn' inside the 'baseQuery' property  to configure the 'fetch' library which is used by RTK query to make api request. This is helpful because before you return from the function you could add in some other logic, like to maybe add in a pause function which would introduce a small delay before making the actual api request.
import { createApi, fetchBaseQuery } from '@redux/toolkit/query/react';
const booksApi = createApi({
    reducerPath: 'books',
    baseQuery: fetchBaseQuery({
        baseUrl: 'http://localhost:3001',
        fetchFn: async (...args) => {
            return fetch(...args);
        },
    }),
});

Add endpoints, which in turn helps to automatically create query(fetch) and mutation(create/edit/delete) hooks
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
const pause = (duration) => {
    return new Promise((resolve) => {
        setTimeout(resolve, duration);
    });
};
const booksApi = createApi({
    reducerPath: 'books',
    baseQuery: fetchBaseQuery({
        baseUrl: 'http://localhost:3001',
        fetchFn: async (...args) => {
            await pause(1000);
            return fetch(...args);
        },
    }),
    endpoints(builder) {
        return {
            fetchBooks: builder.query({
                providesTags: (result, error, additionalArg) => {
                    const tags = result.map((book) => {
                        return { type: 'Book', id: book.id };
                    });
                    tags.push({ type: 'Books' });
                    return tags;
                },
                query: () => {
                    return {
                        url: '/books',
                        params: {},
                        method: 'GET',
                    };
                },
            }),
            addBook: builder.mutation({
                invalidatesTags: (result, error, book) => {
                    return [{ type: 'Books' }];
                },
                query: (book) => {
                    return {
                        url: '/books',
                        method: 'POST',
                        body: {
                            title: book.title,
                        },
                    };
                },
            }),
            editBook: builder.mutation({
                invalidatesTags: (result, error, book) => {
                    return [{ type: 'Book', id: book.id }];
                },
                query: (book) => {
                    return {
                        url: `/books/${book.id}`,
                        method: 'PUT',
                        body: {
                            title: book.title,
                        },
                    };
                },
            }),
            deleteBook: builder.mutation({
              invalidatesTags: (result, error, book) => {
                return [{type: 'Books'}]
              },
              query: (book) => {
                return {
                  url: `/books/${book.id}`,
                  method: 'DELETE',
                }
              }
            })
        };
    },
});
export const { useFetchBooksQuery, useAddBookMutation, useEditBookMutation, useDeleteBookMutation } =
    booksApi;
export { booksApi };
Configure the store inside 'index.js' of store folder
import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';
import { setupListeners } from '@reduxjs/toolkit/query';
import { booksApi } from './apis/booksApi';
const store = configureStore({
    reducer: {
        [booksApi.reducerPath]: booksApi.reducer,
    },
    middleware: (getDefaultMiddleware) => {
        return getDefaultMiddleware().concat(booksApi.middleware);
    },
});
setupListeners(store.dispatch);
export { store };
export {
    useFetchBooksQuery,
    useAddBookMutation,
    useEditBookMutation,
    useDeleteBookMutation,
} from './apis/booksApi';


Wrap the app component inside the provide
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { Provider } from 'react-redux';
import { store } from './store';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <Provider store={store}>
        <App />
    </Provider>
);

To make use of a piece of state inside a component we can use the fetch hooks which are automatically generated by RTK query
import { useFetchBooksQuery } from './store';
function App() {
    const { data, error, isFetching } = useFetchBooksQuery();
    return <div className="container mx-auto">{data.length}</div>;
}
export default App;

To perform create, edit and remove operations we can make use of the mutation hooks which are automatically generated
import {
    useAddBookMutation,
    useDeleteBookMutation,
    useEditBookMutation,
    useFetchBooksQuery,
} from './store';
function App() {
    const { data, error, isFetching } = useFetchBooksQuery();
    const [addBook, results] = useAddBookMutation();
    const [editBook, editResult] = useEditBookMutation();
    const [deleteBook, deleteResult] = useDeleteBookMutation();
    const handleEdit = () => {
        editBook({ title: 'Agatha Christie', id: 2 });
    };
    return (
        <div className="container mx-auto">
            {data?.map((record) => {
                return <p>{record.title}</p>;
            })}
            <div className="flex flex-col gap-y-10">
                <button
                    onClick={() => {
                        addBook({ title: 'Agatha' });
                    }}
                >
                    Add
                </button>
                <button onClick={handleEdit}>Edit</button>
                <button
                    onClick={() => {
                        deleteBook({ id: 2 });
                    }}
                >
                    Delete
                </button>
            </div>
        </div>
    );
}
export default App;












